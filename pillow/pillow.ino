#include "secrets.h"
#include <Arduino.h>
#include <Wire.h>
#include "Adafruit_DRV2605.h"
#include <BMP180I2C.h>

#define I2C_ADDRESS 0x77
BMP180I2C bmp180(I2C_ADDRESS);

Adafruit_DRV2605 drv;
const unsigned long wait_period = 100;
unsigned long previousTime = 0;
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1c412abb-7dc4-4b00-a5f7-939200e3081e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int dial;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

bool increasing = true;
int pressure = 101798; //default pressure

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  
  Wire.begin();

	//begin() initializes the interface, checks the sensor ID and reads the calibration parameters.  
	if (!bmp180.begin())
	{
		Serial.println("begin() failed. check your BMP180 Interface and I2C Address.");
		while (1);
	}

	//reset sensor to default parameters.
	bmp180.resetToDefaults();

	//enable ultra high resolution mode for pressure measurements
	bmp180.setSamplingMode(BMP180MI::MODE_UHR);

    if (! drv.begin()) {
    Serial.println("Could not find DRV2605");
    while (1) delay(10);
  }
 
  drv.selectLibrary(1);
  
  // I2C trigger by sending 'go' command 
  // default, internal trigger when sending GO command
  drv.setMode(DRV2605_MODE_INTTRIG); 
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
}

void loop() {
  ArduinoCloud.update();
  Serial.print("dial val: "); 
  Serial.println(dial);

  // Your code here 
float elasticReading, edgesReading;
  elasticReading = analogRead(A0);
  edgesReading = touchRead(33);
  
  	delay(1000);
  //start a temperature measurement
	if (!bmp180.measureTemperature())
	{
		Serial.println("could not start temperature measurement, is a measurement already running?");
		return;
	}

	//wait for the measurement to finish. proceed as soon as hasValue() returned true. 
	do
	{
		delay(100);
	} while (!bmp180.hasValue());

  //start a pressure measurement. pressure measurements depend on temperature measurement, you should only start a pressure 
	//measurement immediately after a temperature measurement. 
	if (!bmp180.measurePressure())
	{
		Serial.println("could not start perssure measurement, is a measurement already running?");
		return;
	}

	//wait for the measurement to finish. proceed as soon as hasValue() returned true. 
	do
	{
		delay(100);
	} while (!bmp180.hasValue());

	Serial.print("Pressure: "); 
	Serial.print(bmp180.getPressure());
	Serial.println(" Pa");
  
    Serial.print("Edge value: ");
    Serial.println( edgesReading = touchRead(33));
  
    Serial.print("Elastic value: ");
    Serial.println( elasticReading = analogRead(A0));
    Serial.println("-----------------------");
  pressure = bmp180.getPressure();
  
 if (edgesReading < 12 && bmp180.getPressure() > 99000) {  
     onDialIncrease();
   }
  if(elasticReading > 550){  
     onDialDecrease();
   }
    
  //if(touchValue > 120000 && bmp180.getPressure() > 130000) //both pins are touched and pillow is squeezed, so send value to meter
}



/*
  Since Dial is READ_WRITE variable, onDialChange() is
  executed every time a new value is received from IoT Cloud.
*/
void  onDialIncrease() {
  dial++;  // Increase the dial value
  // Ensure the dial stays within the range 0 to 5
  if(dial > 5) {
    dial = 5;
    Serial.println("Dial too high, resetting to 5");
    drv.setWaveform(0, 19);  // play effect for overflow
    drv.setWaveform(1, 0);
    drv.go();
  } else {
    drv.setWaveform(0, 14);  // play effect for valid increase
    drv.setWaveform(1, 0);
    drv.go();
  }
  

    } 
    
    void onDialDecrease() {
      dial--;  // Decrease the dial value

  // Ensure the dial stays within the range 0 to 5
  if(dial < 0) {
    dial = 0;
    Serial.println("Dial too low, resetting to 0");
    drv.setWaveform(0, 19);  // play effect for underflow
  } else {
    drv.setWaveform(0, 14);  // play effect for valid decrease
  }

  drv.setWaveform(1, 0);   // end waveform
  drv.go();  // play the effect!
  }





/*
  Since Dial is READ_WRITE variable, onDialChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDialChange()  {
  // Add your code here to act upon Dial change
}


